# -*- coding: utf-8 -*-
"""Copy of Machine Learning Course Notes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1llUmQoUvYl_-8Urqcca1L7rOh5t6cHCE

#**Day 1** : pandas

Disclaimer:always install packages throught the terminal (accessed through cmd in Microsoft start). Consult the package documentation.

##set-up
"""

# Commented out IPython magic to ensure Python compatibility.
#In Jupyter(software in google collab), the following ensures figures are printed below code:
# %matplotlib inline 

#pandas is the library that allows data manipulation similar to R, matplotlib allows more advanced graphics
import pandas as pd
import matplotlib.pyplot as plt

#import the database into FNAME
FNAME = "http://www.stat.ucla.edu/~rgould/datasets/twins.dat"

#read the database into df
df = pd.read_csv(FNAME, sep='\t', na_values = "?")

#drop missing values in the DLHRWAGE column in df, store in df2
df2 = df.dropna(subset=['DLHRWAGE'])

"""##data description options"""

df.tail() #Show end rows of dataset
df.head() #Show first rows of dataset

df.shape #count

df.columns #display columns

df.describe() #describe numeric data

df.dtypes #identify types(int, num, chr) in data

df.info(memory_usage ="True") #return how much memory usage of datset (relevant to Machine Learning optimisation)

"""##Change types

For both data analysis and for the sake of saving memory usage, it may be useful to convert variables from one type to another. 
For instance it is useful to convert a binary variable into a boolean if it is initially coded under integer, numerical, or categorical data with the following:
"""

df["WHITEH"] = df["WHITEH"].astype(bool)

"""Converting varaibles to integer types may fail in cases of missing values ('?' coerces the variable to a categorical type). This can be overcome by using the to_numeric() function in panda and coercing error returns. In practice:"""

df["LHRWAGEH"] = df["LHRWAGEH"].astype(int) #fails

pd.to_numeric(df["LHRWAGEH"], errors = "coerce") #works

"""##Indexing

Specific columns(variables), rows(observations), and elements(cells) can be accessed by the following code.
"""

df.iloc[0] # finds the first row
df.iloc[9:11] # finds the rows 9 to 11

df["AGE"] #returns the AGE column

df.loc[0, "AGE"] = 20 #returns the first row of the AGE variable (so is the 1st element in the AGE columne)

"""##MASK based indexing

Masks refers to a filter applied in the return of the dataset. For instance, to obtain all observations for which the twin H is not white:


"""

df[df["WHITEH"]==1]
#is the same as:
mask = df["WHITEH"] != 1
df[mask]

"""To return all observations of twins under 60, male, and with 12 to 14 years of education:"""

mask2 = (df["AGE"] <= 60) & (df["MALEL"] == 1) & (df["EDUCH"].isin((12,14))) #1 codes male as typically even numbers are male
df[mask]

"""~ inverses the mask that comes after:"""

mask2 = (df["AGE"] <= 60) & (df["MALEL"] == 1) & (df["EDUCH"].isin((12,14))) #1 codes male as typically even numbers are male
df[~mask]

"""To count all twins for which one is white and the second is not"""

df[df["WHITEH"  ] != df["WHITEL"]]
#more directly:
sum(df["WHITEH"  ] != df["WHITEL"])

"""##Tabulation"""

pd.crosstab(df["WHITEH"], df["WHITEL"])

"""##Sorting and Grouping"""

df1 = df.sort_values(by='LHRWAGEH') #sorting by a column
df = df[sorted(df.columns)] #sort columns
df["AGESQ"] = df["AGE"]**2
df.head()

df2 = df["LHRWAGEH"].fillna(0)

grouped1 = df.groupby(["MALEH"])
type(grouped)
grouped1["AGE"].agg("mean", "std")

#grouped = df.groupby([])
#sixes = 
#sizes.unstack() for only two indices

"""##Plotting

### On colour use

When plotting, it is helpful to remember that colour choice is important. Bright colours should be chosen wisely to channel reader focus.

### Matplotlib
"""

df.plot.scatter(x="AGE", y="EDUCH", color = "teal")

import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize=(20,5))
df.plot.scatter(x="AGE", y="EDUCH", color = "teal", ax=ax)
ax.set(ylabel="Years of schooling", title = "Relationship age and education", 
       ylim=(0,20), xlim=(0,80))
fig.savefig("scatter_age_educh.pdf")

"""### Seaborne

Seaborne is a package for graphics in Python.
It comes with pre-loaded datasets availble through load_dataset(). It's ease of use make it arguably the best package for graphs in Python.
"""

import seaborn as sns

"""#### Continuous data

Seaborne is able to produce the 95% confidence interval without precalculation.
"""

sns.relplot(x="EDUCH", y="LHRWAGEH", data=df, kind="line", hue="MALEH", style="MALEH", markers=True)

sns.relplot(x="EDUCH", y="LHRWAGEH", data=df, kind="line", hue="MALEH", style="MALEH", markers=True, col="WHITEH")

"""#### Categorical data"""

g = sns.catplot(x="MALEH", y="LHRWAGEH", data=df)

g = sns.catplot(x="MALEH", y="LHRWAGEH", data=df, kind="box")

g = sns.catplot(x="MALEH", y="LHRWAGEH", data=df, kind="boxen")

g = sns.catplot(x="MALEH", y="LHRWAGEH", data=df, kind="bar")

"""####Regression and Matrix Plots

To regress years of schooling (EDUCH) onto the log hourly wage (LHRWAGEH):
"""

sns.regplot(x="LHRWAGEH", y="EDUCH", data=df)

"""The matrix plot is similar to facet_wrap() in R. It plots the relationship between columns selected by the programmer."""

cols = ["AGE", "LHRWAGEH", "LHRWAGEL", "DLHRWAGE"]
sns.pairplot(data=df, vars = cols)

sns.pairplot(data=df, vars = cols, diag_kind = "kde")

"""####Heatmaps

# Heatmaps can be thought of as a crosstabulation plot. .
"""

cross = pd.crosstab(df["WHITEL"], df["WHITEH"])
cross
sns.heatmap(cross)

sns.heatmap(cross, annot=True, cmap="viridis")

"""### Searborne versus Matplotlib: long and wide data

**Difference between Matplotlib and Seaborne:** 
Pandas works better with wide data. Seaborne is better with longer data.

##### Going from wide to long

It is possible to convert from wide to long data using the melt function. Converts a two dimensional table into a 1 dimensional list.
"""

df["id"] = df.index
id_vars = ["id", "WHITEH", "MALEH", "EDUCH", "WHITEL", "MALEL", "EDUCL"]
value_vars = ["LHRWAGEL", "LHRWAGEH"]
melted = df.melt(id_vars=id_vars, value_vars=value_vars).sort_values(by=["id"]).dropna()

"""Seaborne can now plot log hourly wage df per twin and per sex:"""

sns.relplot(data=melted, x="EDUCH", y="value", col="variable", row="MALEH")

"""#### Going from long to **wide**

"""

pivoted = melted.pivot(index=id_vars, columns="variable", values="value")

pivoted.index

pivoted.reset_index()
##can reset but didn't catch how.

"""#**Day 2:** PyCharm

On the importance of choosing your data management. Funders require a Research Data Management Plan. This allows researchers to track progress, collaboration, and easier return to projects after break.

IDEs such as Pycharm allow for easier management, keeping key aspects in the same window for the developper. It is free as a community edition, and has an advantage over other IDEs by its integration of projects, which has led to its adoption by 1 third of developers.
"""